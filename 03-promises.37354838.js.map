{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAE3CF,EAAKM,iBAAiB,UAAWC,IAC/BA,EAAMC,iBAEN,MAAMC,EAAQC,SAASP,EAAWQ,OAC5BC,EAAOF,SAASN,EAAUO,OAC1BE,EAASH,SAASL,EAAYM,OAEpC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,IAAK,CAChC,MAAMC,EAAWD,EACXE,EAAeP,EAAQG,GAAQE,EAAI,GAEzCG,YAAW,KAYf,IAAuBC,EAAUC,GAAVD,EAXHH,EAWaI,EAXHH,EAYrB,IAAII,SAAQ,CAACC,EAASC,KAC3BL,YAAW,KACT,MAAMM,EAAgBC,KAAKC,SAAW,GAClCF,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,KAnBJO,MAAK,EAACR,SAAEA,EAAQC,MAAEA,MACjBQ,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAqBX,QAAiBC,MAAU,IAEzEW,OAAM,EAACZ,SAAEA,EAAQC,MAAEA,MAClBQ,EAAA7B,GAAS8B,OAAOG,QAAQ,sBAAoBb,QAAeC,MAAU,GACrE,GACHH,E,KAiBPW,EAAA7B,GAASkC,KAAK,CACZC,eAAe,EACfC,WAAY,YACZC,QAAS,IACTjB,SAAU,SACVkB,SAAU,OACVC,aAAc,MACdC,aAAa,EACbC,iBAAkB,kBAClBC,WAAW,EACXC,kBAAmB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', (event) => {\n  event.preventDefault();\n\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  for (let i = 1; i <= amount; i++) {\n    const position = i;\n    const promiseDelay = delay + step * (i - 1);\n\n    setTimeout(() => {\n      createPromise(position, promiseDelay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }, promiseDelay);\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nNotiflix.init({\n  useGoogleFont: false,\n  fontFamily: 'Quicksand',\n  timeout: 3000,\n  position: 'center',\n  distance: '10px',\n  borderRadius: '5px',\n  backOverlay: true,\n  backOverlayColor: 'rgba(0,0,0,0.5)',\n  plainText: false,\n  cssAnimationStyle: 'fade',\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","addEventListener","event","preventDefault","delay1","parseInt","value","step","amount","i","position1","promiseDelay","setTimeout","position","delay","Promise","resolve","reject","shouldResolve","Math","random","then","$parcel$interopDefault","Notify","success","catch","failure","init","useGoogleFont","fontFamily","timeout","distance","borderRadius","backOverlay","backOverlayColor","plainText","cssAnimationStyle"],"version":3,"file":"03-promises.37354838.js.map"}