{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAE3CF,EAAKM,iBAAiB,UAAU,SAACC,G,kBAQ7B,IAAMC,EAAWC,EACXC,EAAeC,EAAQC,GAAQH,EAAI,GAEzCI,YAAW,WAYf,IAAuBC,EAAUC,GAAVD,EAXHN,EAWaO,EAXHL,EAYrB,IAAIM,SAAQ,SAACC,EAASC,GAC3BL,YAAW,WACaM,KAAKC,SAAW,GAEpCH,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,KAnBEM,MAAK,SAAAC,G,IAAGR,EAAQQ,EAARR,SAAUC,EAAKO,EAALP,MACjBQ,EAAAzB,GAAS0B,OAAOC,QAAQ,uBAAwCC,OAAfZ,EAAS,QAAYY,OAANX,EAAM,M,IAEvEY,OAAM,SAAAL,G,IAAGR,EAAQQ,EAARR,SAAUC,EAAKO,EAALP,MAClBQ,EAAAzB,GAAS0B,OAAOI,QAAQ,sBAAqCF,OAAfZ,EAAS,QAAYY,OAANX,EAAM,M,MAEtEL,E,EAlBLH,EAAMsB,iBAMN,IAJA,IAAMlB,EAAQmB,SAAS3B,EAAW4B,OAC5BnB,EAAOkB,SAAS1B,EAAU2B,OAC1BC,EAASF,SAASzB,EAAY0B,OAE3BE,EAAI,EAAGA,GAAKD,EAAQC,IAAGC,EAAAD,E,IA6BlCV,EAAAzB,GAASqC,KAAK,CACZC,eAAe,EACfC,WAAY,YACZC,QAAS,IACTxB,SAAU,SACVyB,SAAU,OACVC,aAAc,MACdC,aAAa,EACbC,iBAAkB,kBAClBC,WAAW,EACXC,kBAAmB,Q","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', (event) => {\n  event.preventDefault();\n\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  for (let i = 1; i <= amount; i++) {\n    const position = i;\n    const promiseDelay = delay + step * (i - 1);\n\n    setTimeout(() => {\n      createPromise(position, promiseDelay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }, promiseDelay);\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nNotiflix.init({\n  useGoogleFont: false,\n  fontFamily: 'Quicksand',\n  timeout: 3000,\n  position: 'center',\n  distance: '10px',\n  borderRadius: '5px',\n  backOverlay: true,\n  backOverlayColor: 'rgba(0,0,0,0.5)',\n  plainText: false,\n  cssAnimationStyle: 'fade',\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","addEventListener","event","position1","i","promiseDelay","delay1","step","setTimeout","position","delay","Promise","resolve","reject","Math","random","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","preventDefault","parseInt","value","amount","i1","_loop","init","useGoogleFont","fontFamily","timeout","distance","borderRadius","backOverlay","backOverlayColor","plainText","cssAnimationStyle"],"version":3,"file":"03-promises.3f127b13.js.map"}